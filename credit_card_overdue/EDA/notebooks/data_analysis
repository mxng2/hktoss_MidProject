{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm","gpuType":"T4","authorship_tag":"ABX9TyOiWA9d4az8sLR8wXjjtmmi"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sMbMyHRG-41w","executionInfo":{"status":"ok","timestamp":1725264172377,"user_tz":-540,"elapsed":19372,"user":{"displayName":"강민호","userId":"06204824626422712115"}},"outputId":"b5cb701c-e590-41b1-a309-54d0f5fb9f28"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","import warnings\n","warnings.filterwarnings('ignore')"],"metadata":{"id":"A4-_nyLBDUn9","executionInfo":{"status":"ok","timestamp":1725264176527,"user_tz":-540,"elapsed":1680,"user":{"displayName":"강민호","userId":"06204824626422712115"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/hktoss_MidProject/MidProject/중간 프로젝트/PCA/r_tmdwnsdkrhtodgo.csv')\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":342},"id":"5H97-Vfm_iU-","executionInfo":{"status":"ok","timestamp":1725264204488,"user_tz":-540,"elapsed":22927,"user":{"displayName":"강민호","userId":"06204824626422712115"}},"outputId":"72f93c80-6133-45e7-e342-b77acf31b947"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Unnamed: 0  Life_Stage  RP건수_B0M  RP건수_가스_B0M  RP건수_건강_B0M  RP건수_교통_B0M  \\\n","0           0           5         2            0            0            0   \n","1           1           4         0            0            0            0   \n","2           2           4         0            0            0            0   \n","3           3           4         0            0            0            0   \n","4           4           5         1            0            0            0   \n","\n","   RP건수_렌탈_B0M  RP건수_보험_B0M  RP건수_아파트_B0M  RP건수_유선방송_B0M  ...  연령_50  연령_60  \\\n","0            0            1             0              0  ...      0      0   \n","1            0            0             0              0  ...      0      0   \n","2            0            0             0              0  ...      0      0   \n","3            0            0             0              0  ...      0      0   \n","4            0            0             0              0  ...      1      0   \n","\n","   연령_70  이용금액대  직장시도명       PC1       PC2       PC3  발급회원번호  잔액_B0M  \n","0      0      5      0 -3.010090  0.099855 -0.058170       0       2  \n","1      0      3      1 -1.777381 -0.978568 -0.383604       1       1  \n","2      0      2      5 -3.825666  0.729603  0.133052       2       0  \n","3      0      1      5 -3.914116  0.804384  0.144837       3       0  \n","4      0      1     13 -4.097461  0.945743  0.176977       7       1  \n","\n","[5 rows x 92 columns]"],"text/html":["\n","  <div id=\"df-cb614c65-8fd1-48c3-94b1-71d5ba15b28f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>Life_Stage</th>\n","      <th>RP건수_B0M</th>\n","      <th>RP건수_가스_B0M</th>\n","      <th>RP건수_건강_B0M</th>\n","      <th>RP건수_교통_B0M</th>\n","      <th>RP건수_렌탈_B0M</th>\n","      <th>RP건수_보험_B0M</th>\n","      <th>RP건수_아파트_B0M</th>\n","      <th>RP건수_유선방송_B0M</th>\n","      <th>...</th>\n","      <th>연령_50</th>\n","      <th>연령_60</th>\n","      <th>연령_70</th>\n","      <th>이용금액대</th>\n","      <th>직장시도명</th>\n","      <th>PC1</th>\n","      <th>PC2</th>\n","      <th>PC3</th>\n","      <th>발급회원번호</th>\n","      <th>잔액_B0M</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>-3.010090</td>\n","      <td>0.099855</td>\n","      <td>-0.058170</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>-1.777381</td>\n","      <td>-0.978568</td>\n","      <td>-0.383604</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>-3.825666</td>\n","      <td>0.729603</td>\n","      <td>0.133052</td>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>-3.914116</td>\n","      <td>0.804384</td>\n","      <td>0.144837</td>\n","      <td>3</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>13</td>\n","      <td>-4.097461</td>\n","      <td>0.945743</td>\n","      <td>0.176977</td>\n","      <td>7</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 92 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cb614c65-8fd1-48c3-94b1-71d5ba15b28f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-cb614c65-8fd1-48c3-94b1-71d5ba15b28f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-cb614c65-8fd1-48c3-94b1-71d5ba15b28f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-51d84376-67ed-468a-9024-50a04105615c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-51d84376-67ed-468a-9024-50a04105615c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-51d84376-67ed-468a-9024-50a04105615c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["pd.set_option('display.max_rows', None)\n","pd.set_option('display.max_columns', None)\n","df.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JJsiXMz8BRbw","executionInfo":{"status":"ok","timestamp":1725264207778,"user_tz":-540,"elapsed":520,"user":{"displayName":"강민호","userId":"06204824626422712115"}},"outputId":"3fce83a8-9e8b-4c04-f24f-0d4cda6253bd"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Unnamed: 0', 'Life_Stage', 'RP건수_B0M', 'RP건수_가스_B0M', 'RP건수_건강_B0M',\n","       'RP건수_교통_B0M', 'RP건수_렌탈_B0M', 'RP건수_보험_B0M', 'RP건수_아파트_B0M',\n","       'RP건수_유선방송_B0M', 'RP건수_전기_B0M', 'RP건수_제휴사서비스직접판매_B0M', 'RP건수_통신_B0M',\n","       'RP건수_학습비_B0M', 'RP유형건수_B0M', '_1순위교통업종_버스지하철', '_1순위교통업종_없음',\n","       '_1순위교통업종_정비', '_1순위교통업종_주유', '_1순위교통업종_철도버스', '_1순위교통업종_택시',\n","       '_1순위납부업종_가스/전기료', '_1순위납부업종_관리비', '_1순위납부업종_납부기타', '_1순위납부업종_보험료',\n","       '_1순위납부업종_없음', '_1순위납부업종_통신비', '_1순위쇼핑업종_도소매', '_1순위쇼핑업종_마트',\n","       '_1순위쇼핑업종_백화점', '_1순위쇼핑업종_쇼핑기타', '_1순위쇼핑업종_슈퍼마켓', '_1순위쇼핑업종_아울렛',\n","       '_1순위쇼핑업종_없음', '_1순위쇼핑업종_온라인', '_1순위쇼핑업종_편의점', '_1순위업종_교육', '_1순위업종_교통',\n","       '_1순위업종_납부', '_1순위업종_사교활동', '_1순위업종_쇼핑', '_1순위업종_여유생활', '_1순위업종_요식',\n","       '_1순위업종_의료', '_1순위업종_일상생활', '_1순위업종_해외', '_2순위쇼핑업종_도소매', '_2순위쇼핑업종_마트',\n","       '_2순위쇼핑업종_백화점', '_2순위쇼핑업종_쇼핑기타', '_2순위쇼핑업종_슈퍼마켓', '_2순위쇼핑업종_아울렛',\n","       '_2순위쇼핑업종_없음', '_2순위쇼핑업종_온라인', '_2순위쇼핑업종_편의점', '_2순위업종_교육', '_2순위업종_교통',\n","       '_2순위업종_납부', '_2순위업종_사교활동', '_2순위업종_쇼핑', '_2순위업종_없음', '_2순위업종_여유생활',\n","       '_2순위업종_요식', '_2순위업종_의료', '_2순위업종_일상생활', '_2순위업종_해외', '_3순위업종_교육',\n","       '_3순위업종_교통', '_3순위업종_납부', '_3순위업종_사교활동', '_3순위업종_쇼핑', '_3순위업종_없음',\n","       '_3순위업종_여유생활', '_3순위업종_요식', '_3순위업종_의료', '_3순위업종_일상생활', '_3순위업종_해외',\n","       '거주시도명', '남녀구분코드', '연령_20', '연령_30', '연령_40', '연령_50', '연령_60', '연령_70',\n","       '이용금액대', '직장시도명', 'PC1', 'PC2', 'PC3', '발급회원번호', '잔액_B0M'],\n","      dtype='object')"]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["#연체 등급별 성별, 연령, 소비패턴 분석"],"metadata":{"id":"Yz51tRK9BJV9"}},{"cell_type":"code","source":["!apt-get update -qq\n","!apt-get install fonts-nanum* -qq\n","fm._rebuild()\n","\n","import matplotlib.font_manager as fm"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":583},"id":"X2MDmgR7JTfl","executionInfo":{"status":"error","timestamp":1725264231406,"user_tz":-540,"elapsed":21922,"user":{"displayName":"강민호","userId":"06204824626422712115"}},"outputId":"c780b8bd-2b1a-4358-f85f-282f72ea7835"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["W: Skipping acquire of configured file 'main/source/Sources' as repository 'https://r2u.stat.illinois.edu/ubuntu jammy InRelease' does not seem to provide it (sources.list entry misspelt?)\n","Selecting previously unselected package fonts-nanum.\n","(Reading database ... 123597 files and directories currently installed.)\n","Preparing to unpack .../fonts-nanum_20200506-1_all.deb ...\n","Unpacking fonts-nanum (20200506-1) ...\n","Selecting previously unselected package fonts-nanum-coding.\n","Preparing to unpack .../fonts-nanum-coding_2.5-3_all.deb ...\n","Unpacking fonts-nanum-coding (2.5-3) ...\n","Selecting previously unselected package fonts-nanum-eco.\n","Preparing to unpack .../fonts-nanum-eco_1.000-7_all.deb ...\n","Unpacking fonts-nanum-eco (1.000-7) ...\n","Selecting previously unselected package fonts-nanum-extra.\n","Preparing to unpack .../fonts-nanum-extra_20200506-1_all.deb ...\n","Unpacking fonts-nanum-extra (20200506-1) ...\n","Setting up fonts-nanum-extra (20200506-1) ...\n","Setting up fonts-nanum (20200506-1) ...\n","Setting up fonts-nanum-coding (2.5-3) ...\n","Setting up fonts-nanum-eco (1.000-7) ...\n","Processing triggers for fontconfig (2.13.1-4.2ubuntu5) ...\n"]},{"output_type":"error","ename":"NameError","evalue":"name 'fm' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-67f47f18f1d6>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msystem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'apt-get update -qq'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msystem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'apt-get install fonts-nanum* -qq'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mfm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_rebuild\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfont_manager\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfm\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'fm' is not defined"]}]},{"cell_type":"code","source":["!apt-get install -y fonts-nanum\n","!fc-cache -fv\n","!rm ~/.cache/matplotlib -rf\n","\n","# 한글 폰트 설정\n","plt.rc('font', family='NanumGothic')\n","plt.rc('axes', unicode_minus=False)"],"metadata":{"id":"jzLEppnAEnd0","executionInfo":{"status":"aborted","timestamp":1725264231407,"user_tz":-540,"elapsed":11,"user":{"displayName":"강민호","userId":"06204824626422712115"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(8, 6))\n","sns.histplot(data=df, x='잔액_B0M', hue='남녀구분코드', bins=3, multiple='stack', kde=False, palette='Set1')\n","plt.title('성별에 따른 이용금액대 분포')\n","plt.xlabel('이용금액대')\n","plt.ylabel('빈도수')\n","plt.legend(title='성별', labels=['남성', '여성'])\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"HlSbvYxHBIsm","executionInfo":{"status":"ok","timestamp":1725264272326,"user_tz":-540,"elapsed":1702,"user":{"displayName":"강민호","userId":"06204824626422712115"}},"outputId":"29838ed8-69b2-49ee-eacd-e49e73f818a3"},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"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NHfuXMXGxiosLExpaWn6+uuv/fkS/MKX47Js2TKNHDlSXbp0UZcuXZSWltZo/V133SWHw+Fxu+mmm/z9MvzCl2OzcuXKRq87NDTUY017PGdSU1MbHReHw6Fx48a517SFc2bLli0aP3684uLi5HA4tH79+vPuk5eXp6FDh8rpdOqKK67QypUrG63x9fdWa+TrsVm7dq3GjBmjbt26KSIiQikpKXrnnXc81sybN6/ROdO/f38/voqW5+txycvL8/rP0o//LHx7PGe8/Q5xOBy6+uqr3WvawjmTnZ2ta6+9Vp06dVL37t01YcIE7dmz57z7tdaeIWZ9tGbNGmVmZiorK0vbtm1TYmKi0tPTdezYMa/rP/nkE9122226++67tX37dk2YMEETJkzQjh073Gt+//vf67//+7+1dOlSffbZZ7rkkkuUnp6u77//PlAv66L5elzy8vJ022236cMPP1R+fr7i4+N144036vDhwx7rbrrpJh09etR9W7VqVSBeTovy9dhIZ/7Cyg9f98GDBz3ub4/nzNq1az2OyY4dOxQcHKxbbrnFY53p50x1dbUSExOVk5PTrPX79+/XuHHjNHr0aBUVFen+++/XtGnTPKLtQs7B1sjXY7NlyxaNGTNGGzduVGFhoUaPHq3x48dr+/btHuuuvvpqj3Pmo48+8sf4fuPrcTlrz549Hq+7e/fu7vva6znz7LPPehyTQ4cOqWvXro1+z5h+zmzevFkzZszQp59+qvfee0/19fW68cYbVV1d3eQ+rbpnLPgkKSnJmjFjhvvnhoYGKy4uzsrOzva6/tZbb7XGjRvnsS05Odm65557LMuyLJfLZcXExFh/+MMf3PefOHHCcjqd1qpVq/zwCvzD1+PyY6dPn7Y6depkvfzyy+5tU6dOtW6++eaWHjXgfD02L730khUZGdnk43HOnPHMM89YnTp1sqqqqtzb2so5c5Yka926dedc89BDD1lXX321x7aJEyda6enp7p8v9li3Rs05Nt5cddVV1vz5890/Z2VlWYmJiS03mM2ac1w+/PBDS5L13XffNbmGc+aMdevWWQ6Hwzpw4IB7W1s7ZyzLso4dO2ZJsjZv3tzkmtbcM7wz64O6ujoVFhYqLS3NvS0oKEhpaWnKz8/3uk9+fr7HeklKT093r9+/f79KSko81kRGRio5ObnJx2xtLuS4/NipU6dU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AAAAMBYxCwAAAGMRswAAADAWMQsAAABjEbMAAAAwFjELAAAAY3WwewAAaI82b96se+65R6GhoR7bXS6XRo0apYKCAtXW1jbar6qqSjt37tSSJUv05z//WR06eP4ar6ur06OPPqrrrrtOY8eOVXh4eKPH6N27t9atW6ef//zn2r9/f6P7T506pbffflt9+vS5yFcJAP5HzAKADWpqajRp0iTNmzfPY/uBAwc0e/ZsORwOFRUVNdovNTVVlmXpu+++03PPPafU1FSP+1euXKnKykrV19drxIgRWrlyZaPHuO666yRJR48e9focd911l+rr6y/wlQFAYHGZAQAAAIxFzAIAAMBYxCwAAACMRcwCAADAWMQsAAAAjEXMAgAAwFjELAAAAIxFzAIAAMBYxCwAAACMRcwCAADAWPw5WwCwQWRkpDZs2KANGzY0ui89PV0nTpzQ8OHDve4bFBSkyy67TA8++KDX+x955BGFhYVpx44dXh9j4MCBkqQBAwY0+RxhYWHNfSkAYCuHZVmW3UMAAAAAF4LLDAAAAGAsYhYAAADGImYBAABgLGIWAAAAxiJmAQAAYCxiFgAAAMYiZgEAAGAsYhYAAADGImYBAABgrP8Hrysh3vAYpWAAAAAASUVORK5CYII=\n"},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier\n","import pandas as pd\n","import plotly.express as px\n","from sklearn.datasets import load_iris\n","\n","# Iris 데이터셋 로드\n","X = pd.DataFrame(data=df, columns=df.columns)\n","X = X.drop(['잔액_B0M'], axis=1)\n","y = df['잔액_B0M']\n","\n","# 랜덤포레스트 모델 생성 및 학습\n","model = RandomForestClassifier(n_estimators=100, random_state=42)\n","model.fit(X, y)\n","\n","# Feature Importance 추출\n","importances = model.feature_importances_\n","feature_names = X.columns\n","\n","# DataFrame으로 변환 (Plotly Express에서 사용하기 위해)\n","importance_df = pd.DataFrame({\n","    'Feature': feature_names,\n","    'Importance': importances\n","})\n","\n","# Plotly Express로 시각화\n","fig = px.bar(importance_df, x='Importance', y='Feature', orientation='h',\n","             title='Feature Importance', labels={'Importance':'Importance', 'Feature':'Feature'})\n","\n","# 그래프 출력\n","fig.show()\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":388},"id":"aH_fAbgkAroL","executionInfo":{"status":"error","timestamp":1725265002105,"user_tz":-540,"elapsed":726662,"user":{"displayName":"강민호","userId":"06204824626422712115"}},"outputId":"358ce246-c696-4e2a-9184-53ebee1b3638"},"execution_count":9,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-d2753cf59026>\u001b[0m in \u001b[0;36m<cell line: 13>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;31m# 랜덤포레스트 모델 생성 및 학습\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mRandomForestClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_estimators\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;31m# Feature Importance 추출\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1150\u001b[0m                 )\n\u001b[1;32m   1151\u001b[0m             ):\n\u001b[0;32m-> 1152\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1153\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1154\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    454\u001b[0m             \u001b[0;31m# parallel_backend contexts set at a higher level,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    455\u001b[0m             \u001b[0;31m# since correctness does not rely on using threads.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 456\u001b[0;31m             trees = Parallel(\n\u001b[0m\u001b[1;32m    457\u001b[0m                 \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    458\u001b[0m                 \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m     63\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mdelayed_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32min\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m         )\n\u001b[0;32m---> 65\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable_with_config\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     66\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1916\u001b[0m             \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_sequential_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1917\u001b[0m             \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1918\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0moutput\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreturn_generator\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1919\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1920\u001b[0m         \u001b[0;31m# Let's create an ID that uniquely identifies the current call. If the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_get_sequential_output\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1845\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_dispatched_batches\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1846\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_dispatched_tasks\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1847\u001b[0;31m                 \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1848\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_completed_tasks\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1849\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_progress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    125\u001b[0m             \u001b[0mconfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    126\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mconfig_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 127\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36m_parallel_build_trees\u001b[0;34m(tree, bootstrap, X, y, sample_weight, tree_idx, n_trees, verbose, class_weight, n_samples_bootstrap)\u001b[0m\n\u001b[1;32m    186\u001b[0m             \u001b[0mcurr_sample_weight\u001b[0m \u001b[0;34m*=\u001b[0m \u001b[0mcompute_sample_weight\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"balanced\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindices\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    187\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 188\u001b[0;31m         \u001b[0mtree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcurr_sample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_input\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    189\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    190\u001b[0m         \u001b[0mtree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_input\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1150\u001b[0m                 )\n\u001b[1;32m   1151\u001b[0m             ):\n\u001b[0;32m-> 1152\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1153\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1154\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, check_input)\u001b[0m\n\u001b[1;32m    957\u001b[0m         \"\"\"\n\u001b[1;32m    958\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 959\u001b[0;31m         super()._fit(\n\u001b[0m\u001b[1;32m    960\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    961\u001b[0m             \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36m_fit\u001b[0;34m(self, X, y, sample_weight, check_input, missing_values_in_feature_mask)\u001b[0m\n\u001b[1;32m    441\u001b[0m             )\n\u001b[1;32m    442\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 443\u001b[0;31m         \u001b[0mbuilder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuild\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtree_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmissing_values_in_feature_mask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    444\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    445\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_outputs_\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mis_classifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","source":["- 연체자(N)인데 연체자가 아니라고 판단하는것.\n","- 위 줄에 맞는 feature들 뽑아내기(의미 있다고 판단하는 변수들 위주로 뽑아내기)\n","- 높게 나온 변수들이 실제로 어떤 의미인지까지 분석"],"metadata":{"id":"zwOPDdDdc6WX"}},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier\n","import pandas as pd\n","import plotly.express as px\n","\n","# Iris 데이터셋 로드\n","X = pd.DataFrame(data=df, columns=df.columns)\n","X = X.drop(['잔액_B0M'], axis=1)\n","y = df['잔액_B0M']\n","\n","# 랜덤포레스트 모델 생성 및 학습\n","model = RandomForestClassifier(n_estimators=100, random_state=42)\n","model.fit(X, y)\n","\n","# Feature Importance 추출\n","importances = model.feature_importances_\n","feature_names = X.columns\n","\n","# DataFrame으로 변환 (Plotly Express에서 사용하기 위해)\n","importance_df = pd.DataFrame({\n","    'Feature': feature_names,\n","    'Importance': importances\n","})\n","\n","# Feature Importance 상위 15개만 추출\n","top_15_importance_df = importance_df.nlargest(15, 'Importance')\n","\n","# Plotly Express로 시각화\n","fig = px.bar(top_15_importance_df, x='Importance', y='Feature', orientation='h',\n","             title='Top 15 Feature Importance', labels={'Importance':'Importance', 'Feature':'Feature'})\n","\n","# 그래프 출력\n","fig.show()"],"metadata":{"id":"RgdwCx-YLa18","executionInfo":{"status":"aborted","timestamp":1725265002106,"user_tz":-540,"elapsed":2,"user":{"displayName":"강민호","userId":"06204824626422712115"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","# 필요한 컬럼 목록\n","columns_to_extract = [\n","    '이용금액대', 'PC1', 'PC2', 'PC3', '_3순위업종_없음', '직장시도명', '거주시도명',\n","    '_2순위쇼핑업종_없음', 'Life_Stage', '_2순위업종_없음', '_1순위쇼핑업종_없음',\n","    'RP건수_B0M', '_1순위업종_쇼핑'\n","]\n","\n","# 'df'가 DataFrame의 변수 이름이라고 가정합니다.\n","# 다른 DataFrame을 사용하는 경우 'df'를 해당 변수 이름으로 바꾸세요.\n","subset_df = df[columns_to_extract]\n","\n","# CSV 파일로 저장\n","subset_df.to_csv('selected_columns.csv', index=False)\n","\n","print(\"CSV 파일이 생성되었습니다: 'selected_columns.csv'\")"],"metadata":{"id":"syDwiyeDcQUx","executionInfo":{"status":"aborted","timestamp":1725265002106,"user_tz":-540,"elapsed":2,"user":{"displayName":"강민호","userId":"06204824626422712115"}}},"execution_count":null,"outputs":[]}]}